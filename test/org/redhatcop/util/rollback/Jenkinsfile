

library identifier: "pipeline-library@master", retriever: modernSCM(
  [$class: "GitSCMSource",
   remote: "https://github.com/syvanen/pipeline-library.git", branch: "pr19"])

node ('maven') {
  stage('Code Build') {
      git url: "${SOURCE_CODE_URL}"
      sh "mvn clean install -q"
  }

  stage('Image Build') {
      echo 'Building Image from Jar File'
      sh """
      set +x
        rm -rf oc-build && mkdir -p oc-build/deployments
        for t in \$(echo "jar;war;ear" | tr ";" "\\n"); do
          cp -rfv ./target/*.\$t oc-build/deployments/ 2> /dev/null || echo "No \$t files"
        done
      """
      script {
        openshift.withCluster() {
          openshift.startBuild("spring-rest", "--from-dir=oc-build", "--wait", "--follow")
        }
      }
  }

  stage ('Verify Deployment to Dev') {
      script {
        openshift.withCluster() {
          def dcObj = openshift.selector('dc', "spring-rest").object()
          def podSelector = openshift.selector('pod', [deployment: "spring-rest-${dcObj.status.latestVersion}"])
          podSelector.untilEach {
              echo "pod: ${it.name()}"
              return it.object().status.containerStatuses[0].ready
          }
        }
      }
  }

  stage('Test Rollback') {
      rollback(deploymentConfig: "dc/spring-rest")
  }
}
